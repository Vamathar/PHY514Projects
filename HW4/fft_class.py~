################################################################################
# Author: Noah Green
# Assignment: PHY 514 Homework 4
# Description: Fast Fourier Transform Program
################################################################################

import numpy as np
import numpy.fft as ft
import time

class fourier:
    def __init__(self,vec):
        """
        Constructor for fourier transform class

        Input:
            vec: 1 dimensional array-like object
            n: int, number of terms to evaluate in vec
        """
        vec = list(vec)
        n = len(vec)
        pow2 = 0
        twos=1
        while twos < n:
            pow2+=1
            twos*=2
        if len(vec) < twos:
            m = twos-len(vec)
            add = list(np.zeros(m))
            vec+=add
        self.pow2 = pow2
        vec = np.array(vec,dtype=complex)
        self.v = vec
        self.n = len(vec)
        self.no2 = int(self.n/2)
        self.t = 0.

        self.phi = list()



    def dft(self):
        """
        Performs discrete Fourier transform
        """
        ft = np.zeros(self.n,dtype=complex)
        start = time.time()
        const = 2.*np.pi/self.n
        for k in range(self.n):
            re = 0.
            im = 0.
            for i in range(self.n):
                val = const*k*i
                re += self.v[i]*np.cos(val)
                im -= self.v[i]*np.sin(val)
            ft[k] = np.complex(re,im)
        end = time.time()
        self.t = end-start
        return ft
                
    def fft(self):
        """
        Performs fast Fourier transform using Cooley-Tukey algorithm.
        """
        def bitme(val,pow2):
            """
            Rearranges initial vector to work nicely with butterfly diagram
            """
            out = 0
            for i in range(pow2):
                out = (out<<1) | (val&1)
                val >>=1
            return out
        fft = self.v.copy()
        fft = np.array([fft[bitme(i,self.pow2)] for i in range(self.n)],dtype=complex)
        N = 2
        start = time.time()
        while N <= self.n:
            No2 = int(N/2)
            step = int(self.n/N)
            for i in range(0,self.n,N):
                k = 0
                for j in range(i,i+No2):
                    val = fft[j+No2]*np.exp(-2.*np.pi*1j*k/self.n)
                    fft[j+No2]=fft[j]-val
                    fft[j]+=val
                    k+=step
            N*=2
        end = time.time()
        self.t = end - start
        return fft 



